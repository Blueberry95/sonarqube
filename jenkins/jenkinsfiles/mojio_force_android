pipeline {
    agent any
    parameters {
        string(name: 'GIT_BRANCH',  description: 'Branch which will be analyzed', defaultValue: 'develop')
        string(name: 'BUILD_TYPE', description: 'BUILD_TYPE', defaultValue: 'debug')
        string(name: 'FLAVOR', description: 'FLAVOR', defaultValue: 'force')
    } 
    environment {
        PROJECT_KEY = "mojio:force-android"
        BASE_URL = "http://localhost:9000/api"
    }

    stages {
        stage('Clone repo') {
            steps { 
                cleanWs()
                git branch: "${params.GIT_BRANCH}", 
                credentialsId: "mojio_android", 
                url: 'git@github.com:mojio/force-android.git'
            }
        }
        stage('Gradle build') {
            steps {
                script {
                    BUILD_VARIANT = "${params.FLAVOR}${params.BUILD_TYPE.capitalize()}"
                }
                sh "./gradlew -Pcoverage -Dorg.gradle.jvmargs=-Xmx2048m cleanBuildCache clean assemble${BUILD_VARIANT.capitalize()} --stacktrace"
            }
        }
        stage('Android lint & Jacoco test report & Detekt run') {
            steps {
                script {
                    BUILD_VARIANT = "${params.FLAVOR}${params.BUILD_TYPE.capitalize()}"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "./gradlew jacocoTest${BUILD_VARIANT.capitalize()}UnitTestReport"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "./gradlew lint${BUILD_VARIANT.capitalize()}"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "./gradlew detektGenerateConfig detekt"
                }
            }
        }
        // detekt will fall on issues, so we catching error here and continue execution
        stage('SonarQube analysis') {
            steps { 
                script {
                    // requires SonarQube Scanner 2.8+
                    scannerHome = tool 'sonarqube'
                    BUILD_VARIANT = "${params.FLAVOR}${params.BUILD_TYPE.capitalize()}"
                }
                withSonarQubeEnv('sonarqube') {
                    sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${PROJECT_KEY} -Dsonar.projectName='Mojio Force-Android' -Dsonar.projectVersion=$BUILD_NUMBER \
                    -Dsonar.java.libraries=$ANDROID_HOME/platforms/android-29/android.jar \
                    -Dsonar.java.coveragePlugin=jacoco -Dsonar.coverage.jacoco.xmlReportPaths=app/build/reports/jacoco/jacocoTest${BUILD_VARIANT.capitalize()}UnitTestReport/jacocoTest${BUILD_VARIANT.capitalize()}UnitTestReport.xml \
                    -Dsonar.androidLint.reportPaths=app/build/reports/lint-results-${BUILD_VARIANT}.xml -Dsonar.kotlin.detekt.reportPaths=app/build/reports/detekt/detekt.xml" 
                }
                script {
                    ANALYSIS_ID = sh(
                        script:"curl -u admin:admin $BASE_URL/project_analyses/search?project=$PROJECT_KEY | jq -rM .analyses[0].key | tr -d '\n'",
                        returnStdout: true
                    )
                    PROJECT_ID = sh(
                        script:"curl -u admin:admin $BASE_URL/projects/search?projects=$PROJECT_KEY | jq -rM .components[0].id | tr -d '\n'",
                        returnStdout: true
                    )
                    QUALITY_STATUS = sh(
                        script:"curl -u admin:admin \'$BASE_URL/qualitygates/project_status?projectKey=$PROJECT_KEY&projectId=$PROJECT_ID&analysisId=$ANALYSIS_ID\' | jq -rM .projectStatus.status | tr -d '\n'",
                        returnStdout: true
                    )

                    if (QUALITY_STATUS == "OK") {                                          
                        echo "Analyses was successful"
                    } else {                                   
                        error("Build failed because analyses wasn't successful")
                    }
                }
            }
        }
    }
}